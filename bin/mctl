#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""mctl - MiMa Control Script"""

import argparse
import configparser
import datetime
import os
import os.path
import re
import subprocess
import sys
import tempfile
import time
from collections import OrderedDict
from pathlib import Path

__version__ = '0.2.1'
basedir = os.path.expanduser('~/mctl')

####################################################################
# read configuration
####################################################################
configuration = configparser.ConfigParser()
configuration.read_file(open(os.path.join(basedir, 'etc/config.ini')))
pdus_config = configparser.ConfigParser()
pdus_config.read_file(open(os.path.join(basedir, 'etc/pdus.ini')))
hosts_config = configparser.ConfigParser(defaults={'exclude': 'no'})
hosts_config.read_file(open(os.path.join(basedir, 'etc/hosts.ini')))


####################################################################
# functions and classes
####################################################################
def log(text, prepend='\n'):
    sys.stdout.write(prepend + 'mctl: ' + text + '\n')


def dlog(text, prepend='\n'):
    if args.debug:
        sys.stdout.write(prepend + 'mctl' + args.debug + ': ' + text + '\n')


class Config:
    def __init__(self, section, items):
        for key, value in items:
            if section == 'durations':
                setattr(self, key, int(value))
            elif section == 'paths' and not os.path.isabs(value):
                setattr(self, key, os.path.join(basedir, value))
            else:
                setattr(self, key, value)


config = dict()
for section in configuration.sections():
    config[section] = Config(section, configuration.items(section))


# note the differences:
# Pdu = class
# pdu = dictionary of all Pdu objects
# h.pdu = pdu attribute of host h
# pdus = list of pdunames of the hosts given on the command line
class Pdu:
    _attributes = []

    def __init__(self, section, items):
        for key, value in items:
            setattr(self, key, value)
            if key not in self._attributes:
                self._attributes.append(key)


pdu = dict()
for section in pdus_config.sections():
    pdu[section] = Pdu(section, pdus_config.items(section))

re_comma = re.compile(' *, *')
item_template = '    {:17}: {}'


# note the differences:
# Host = class
# host = dictionary of all Host objects
# hosts = list of hostnames of the hosts given on the command line
class Host:
    _attributes = []
    _instances = []
    names = []

    def __init__(self, name, items):
        self.name = name
        self.preferred_name = name
        self.all_names = [name, ]
        self.names.append(name)
        self._instances.append(self)
        self._attributes = ['name', 'all_names']
        for key, value in items:
            if key == 'pdu':
                if value not in pdus_config.sections():
                    log('error: there is no pdu called \'{}\', aborting ... '.format(value))
                    sys.exit(1)
            if key == 'alternative names':
                self.all_names.extend(re.split(re_comma, value))
            else:
                if key == 'exclude':
                    setattr(self, key, hosts_config.getboolean(name, key))
                else:
                    setattr(self, key, value)
                if key not in self._attributes:
                    self._attributes.append(key)
        self.script = ''

    def addline(self, line):
        self.script += line + '\n'

    def boot(self):
        self.addline('echo "waking up {} ..."'.format(self.preferred_name))
        self.addline('{} {}'.format(self.boot_cmd, self.mac))
        self.sleep(self.boot_duration)

    def lock(self, direction):
        self.addline('echo "setting {} lock for {} ..."'.format(direction, self.preferred_name))
        self.addline('touch {}.{}'.format(os.path.join(config['paths'].lockdir, self.name), direction))

    def outlet_off(self):
        if 'outlet' in self._attributes:
            self.addline('echo "asserting \'outlet off\' for {} ..."'.format(self.preferred_name))
            self.addline(
                pdu[self.pdu].off_cmd.format(pdu[self.pdu].auth_password, pdu[self.pdu].priv_password, pdu[self.pdu].ip,
                                             self.outlet))
            self.sleep(self.power_disruption)
        else:
            self.addline(
                'echo "skipping \'outlet off\' for {}, as it is unconnected to pdu ..."'.format(self.preferred_name))

    def outlet_on(self):
        if 'outlet' in self._attributes:
            self.addline('echo "asserting \'outlet on\' for {} ..."'.format(self.preferred_name))
            self.addline(
                pdu[self.pdu].on_cmd.format(pdu[self.pdu].auth_password, pdu[self.pdu].priv_password, pdu[self.pdu].ip,
                                            self.outlet))
            self.sleep(config['durations'].pause)
        else:
            self.addline(
                'echo "skipping \'outlet on\' for {}, as it is unconnected to pdu ..."'.format(self.preferred_name))

    def outlet_status(self):
        if 'outlet' in self._attributes:
            self.addline('echo "outlet status for {} ..."'.format(self.preferred_name))
            self.addline(pdu[self.pdu].status_cmd.format(pdu[self.pdu].auth_password, pdu[self.pdu].priv_password,
                                                         pdu[self.pdu].ip, self.outlet))
            self.addline('echo "1 means on, 0 or 2 means off"')
        else:
            self.addline(
                'echo "skipping outlet status for {}, as it is unconnected to pdu ..."'.format(self.preferred_name))

    def ping(self):
        self.addline('echo "pinging {} ..."'.format(self.preferred_name))
        self.addline('ping -c 1 {}'.format(self.ip))

    def reboot(self):
        self.addline('echo "rebooting {} ..."'.format(self.preferred_name))
        self.addline('ssh -f -i {} {}@{} {}'.format(config['paths'].keyfile, self.user, self.ip, self.reboot_cmd))
        self.sleep(self.reboot_duration)

    def show(self):
        print('  ' + self.preferred_name)
        for a in self._attributes:
            if a == 'all_names':
                print(item_template.format(a, ', '.join(getattr(self, a))))
            else:
                print(item_template.format(a, getattr(self, a)))
        print('')

    def shutdown(self):
        self.addline('echo "shutting down {} ..."'.format(self.preferred_name))
        self.addline('ssh -f -i {} {}@{} {}'.format(config['paths'].keyfile, self.user, self.ip, self.shutdown_cmd))
        self.sleep(self.shutdown_duration)

    def sleep(self, seconds):
        self.addline('echo "sleeping {} seconds ..."'.format(seconds, ))
        self.addline('sleep {}'.format(seconds, ))

    def unlock(self, direction):
        self.addline('echo "removing {} lock for {} ..."'.format(direction, self.preferred_name))
        self.addline('rm {}.{}'.format(os.path.join(config['paths'].lockdir, self.name), direction))

    def uptime(self):
        self.addline('echo "uptime of {} ..."'.format(self.preferred_name))
        self.addline('ssh -f -i {} {}@{} {}'.format(config['paths'].keyfile, self.user, self.ip, self.uptime_cmd))


host = dict()
for section in hosts_config.sections():
    host[section] = Host(section, hosts_config.items(section))


def lock(hn, direction):
    Path(os.path.join(config['paths'].lockdir, hn) + '.' + direction).touch()


def unlocked(hn, direction):
    lockfile = os.path.join(config['paths'].lockdir, hn) + '.' + direction
    try:
        locktime = datetime.datetime.fromtimestamp(os.path.getmtime(lockfile))
    except FileNotFoundError:
        return True
    if (datetime.datetime.now() - locktime).total_seconds() > config['durations'].lock:
        return True
    else:
        return False


####################################################################
# parse command line
####################################################################
actions = OrderedDict([
    ('show', 'show host and action definitions'),
    ('status', 'show host power outlet, ping and uptime status'),
    ('start', 'connect host to power and boot host'),
    ('reboot', 'reboot host regularly by a software command'),
    ('shutdown', 'shutdown host regularly by a software command'),
    ('poweroff', 'like shutdown, but disconnect from power afterwards'),
    ('fix', 'like poweroff followed by start. This will get a hanging host back to work.')
])

parser = argparse.ArgumentParser(
    description='This is mctl - the MiMa Control Script.',
)
parser.add_argument(
    'action',
    help='''one action to execute from the following list: {}. The
  word may be abbreviated. The match is done
  case-insensitive. Type 'mctl -d show all' for further
  information'''.format(', '.join(actions.keys())),
)
all_host_names = 'all, ' + ', '.join([', '.join(h.all_names) for h in Host._instances])
parser.add_argument(
    'host',
    nargs='+',
    help="""host to execute the action on. A possibly
  abbreviated first word from the following list: {}. The special
  word 'all' means all non-excluded hosts. The match is done
  case-insensitive.""".format(all_host_names),
)
parser.add_argument(
    '-V',
    '--version',
    action='version',
    version='This is %(prog)s version ' + __version__ + '.',
)
parser.add_argument(
    '-d',
    '--debug',
    action='store_const',
    const=' debug',
    default='',
    help='turn on debug mode',
)
parser.add_argument(
    '-n',
    '--dry_run',
    action='store_true',
    help="contact neither the target hosts nor the PDUs",
)
args = parser.parse_args()

####################################################################
## determine action
####################################################################
re_nonalphanumeric = re.compile('[\W_]+', re.UNICODE)
a2 = re_nonalphanumeric.sub('', args.action.casefold())
hits = 0
for a in actions.keys():
    if re.match(a2, a):
        action = a
        hits += 1
if not hits == 1:
    log('Error: first command line argument \'{}\' doesn\'t match exactly one action, exiting ...'.format(a2),
        prepend='')
    sys.exit(1)
if action == 'show':
    print('\nrequested host definitions')

####################################################################
# determine hosts
####################################################################
hosts = []
pdus = []
for ah in args.host:
    ah2 = re_nonalphanumeric.sub('', ah.casefold())
    hits = 0
    if re.match(ah2, 'all', flags=re.IGNORECASE):
        hits += 1
        for h in Host._instances:
            if (not h.exclude or action == 'show') and not h.name in hosts:
                hosts.append(h.name)
                if not h.pdu in pdus:
                    pdus.append(h.pdu)
    for h in Host._instances:
        for n in h.all_names:
            if re.match(ah2, n, flags=re.IGNORECASE):
                hits += 1
                if h.name not in hosts:
                    hosts.append(h.name)
                    h.preferred_name = n
                    if h.pdu not in pdus:
                        pdus.append(h.pdu)
                break
    if not hits == 1:
        log('Error: command line argument \'{}\' neither matches exactly one host nor the word \'all\', exiting ...'.format(
            ah), prepend='')
        sys.exit(1)

####################################################################
# compose scripts
####################################################################
u = 'upwards'
d = 'downwards'
for hn in hosts:
    h = host[hn]
    h.addline('echo "Beginning of \'{}\' for host \'{}\':"'.format(action, h.preferred_name))
    if action == 'show':
        h.show()
    elif action == 'status':
        h.outlet_status()
        h.ping()
        h.uptime()
    elif action == 'start':
        if unlocked(hn, d):
            h.lock(u)
            h.outlet_on()
            h.boot()
            h.unlock(u)
        else:
            log('skipping \'{}\' for \'{}\' due to {} lock'.format(action, h.preferred_name, d))
    elif action == 'reboot':
        if unlocked(hn, d) and unlocked(hn, u):
            h.lock(d)
            h.lock(u)
            h.reboot()
            h.unlock(d)
            h.unlock(u)
        else:
            log('skipping \'{}\' for \'{}\' due to {} or {} lock'.format(action, h.preferred_name, d, u))
    elif action == 'shutdown':
        if unlocked(hn, u):
            h.lock(d)
            h.shutdown()
            h.unlock(d)
        else:
            log('skipping \'{}\' for \'{}\' due to {} lock'.format(action, h.preferred_name, u))
    elif action == 'poweroff':
        if unlocked(hn, u):
            h.lock(d)
            h.shutdown()
            h.outlet_off()
            h.unlock(d)
        else:
            log('skipping \'{}\' for \'{}\' due to {} lock'.format(action, h.preferred_name, u))
    elif action == 'fix':
        if unlocked(hn, u) and unlocked(hn, d):
            h.lock(d)
            h.lock(u)
            h.shutdown()
            h.outlet_off()
            h.outlet_on()
            h.boot()
            h.unlock(d)
            h.unlock(u)
        else:
            log('skipping \'{}\' for \'{}\' due to lock'.format(action, h.preferred_name))
    else:
        log('Error: forgotten action, exiting ...')
        sys.exit(1)
    h.addline('echo "End of \'{}\' for host \'{}\'."'.format(action, h.preferred_name))

####################################################################
# execute scripts
####################################################################
if action == 'show':
    if args.debug:
        print('\nrelated pdu definitions')
        for section in pdus:
            print('  ' + section)
            for a in pdu[section]._attributes:
                print(item_template.format(a, getattr(pdu[section], a)))
            print('')
    print('\navailable actions')
    for key, value in actions.items():
        print(item_template.format(key, value))
    if args.debug:
        print('''
In our setup we have the host level and the power outlet level. The above-mentioned compound actions include all reasonable combinations of the atomic actions
- turn on power outlet (if it is not on already)
- turn on host (if it is not on already)
- turn off host (if it is not off already)
- turn off power outlet (if it is not off already)
To turn on a host without turning on its power outlet before is not reasonable, for instance. The names of the actions may be misleading as - say - poweroff usually not includes disconnecting the host from power.''')
    log('End of MiMa Control Script')
    sys.exit(0)

files = dict()  # temporary files for input and output
processes = dict()  # script processes
j = 0  # script's serial number
for hn in hosts:
    h = host[hn]
    files[j] = tempfile.TemporaryFile(mode='w+b')
    dlog(h.script)
    if args.dry_run:
        h.script = ''
        h.addline('echo "Dry-run output of action \'{}\' on host \'{}\'.\n"'.format(action, h.preferred_name))
    processes[j] = subprocess.Popen(h.script, stdout=files[j], stderr=files[j], shell=True)
    time.sleep(config['durations'].pause)
    j += 1

####################################################################
# print output
####################################################################
if args.dry_run:
    time.sleep(config['durations'].pause)
for k in range(j):
    print('')
    if not args.dry_run:
        processes[k].wait()
    files[k].seek(0)
    print(files[k].read().decode('UTF-8'))

log('End of MiMa Control Script')
